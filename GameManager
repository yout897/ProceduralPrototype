using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GameManager : MonoBehaviour {


    public Room[] rooms = new Room[9];
    public Room[] floor = new Room[10];
    public GameObject objs;

    private int held;
    private Room prevPlaced;
    private string upS = "Up",downS = "Down",rightS = "Right",leftS = "Left";

    void Start () {

        for (int d = 0;d<rooms.Length;d++)
        {
            rooms[d] = new Room(d,objs);
        }
        floor[0] = rooms[0];
        prevPlaced = floor[0];
        Instantiate(floor[0].obj,new Vector3(0,0,0),Quaternion.identity);
        for (int j = 0; j < floor.Length; j++)
        {
            Debug.Log("J: " + j);
            RoomInArray(floor, rooms, j);
            Debug.Log("Up: " + prevPlaced.up + "\tDown: " + prevPlaced.down + "\tLeft: " + prevPlaced.left + "\tRight: " + prevPlaced.right);
        }
    }
	
	// Update is called once per frame
	void Update () {

        if (Input.GetKeyDown(KeyCode.R))
        {
            Application.LoadLevel(0);
        }
	}

    bool CanBePlaced(Room _one, Room _two)
    {
        Debug.Log("Checking...");
        if (_two.HasUp() && _one.HasDown())
        {
            _two.where = "Down";
            _one.down = false;
            _two.up = false;
            return true;
        }
        else if (_two.HasDown() == _one.HasUp() )
        {
            _two.where = "Up";
            _one.up = false;
            _two.down = false;
            return true;
        }
        else if (_two.HasLeft() == _one.HasRight() )
        {
            _two.where = "Right";
            _one.right = false;
            _two.left = false;
            return true;
        }
        else if (_two.HasRight() == _one.HasLeft() )
        {
            _two.where = "Left";
            _one.left = false;
            _two.right = false;
            return true;
        }
        return false;
    }

    void RoomInArray(Room[] _floor,Room[] _rooms, int _num)
    {
        held = _num;
        int rand = (int)(Random.Range(1,9));
        Debug.Log("Random: " + rand);
        if (CanBePlaced(_floor[_num],_rooms[rand]))
        {
            Debug.Log("Placed");
            _floor[_num+1] = _rooms[rand];
            _floor[_num].connected = true;
            PlaceRoom(floor, _num);
            
        }
        else
        {
            Debug.Log("Held: " + held);
            RoomInArray(_floor,_rooms,held);
        }
        
    }

    void PlaceRoom(Room[] _floor,int _num)
    {
        Debug.Log("Prev:" + prevPlaced);
        Debug.Log("Cur:" + _floor[_num]);
        if (_floor[_num].where == "Down")
            Instantiate(_floor[_num].obj,(new Vector3(0,prevPlaced.obj.transform.position.y - 10,0)),Quaternion.identity);
        else if (_floor[_num].where == "Up")
            Instantiate(_floor[_num].obj, (new Vector3(0, prevPlaced.obj.transform.position.y + 10, 0)), Quaternion.identity);
        else if (_floor[_num].where == "Left")
            Instantiate(_floor[_num].obj, (new Vector3(prevPlaced.obj.transform.position.x - 12,0 , 0)), Quaternion.identity);
        else if (_floor[_num].where == "Down")
            Instantiate(_floor[_num].obj, (new Vector3(prevPlaced.obj.transform.position.x + 12,0 , 0)), Quaternion.identity);
        prevPlaced = _floor[_num];
        
    }
}
